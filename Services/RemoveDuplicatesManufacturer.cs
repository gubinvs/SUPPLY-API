using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace SUPPLY_API
{
    public class RemoveDuplicatesManufacturer : BackgroundService
    {
        /// <summary>
        /// üìå –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥:
        /// –ò—â–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∏–º–µ–Ω–µ–º (NameManufacturer);
        /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–Ω—É –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å;
        /// –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (ManufacturerComponent) —Å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç;
        /// –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ª–∏—à–Ω–∏–µ —Å–≤—è–∑–∏;
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏.
        /// </summary>

        private readonly IServiceProvider _serviceProvider;
        private readonly ILogger<RemoveDuplicatesManufacturer> _logger;

        public RemoveDuplicatesManufacturer(IServiceProvider serviceProvider, ILogger<RemoveDuplicatesManufacturer> logger)
        {
            _serviceProvider = serviceProvider;
            _logger = logger;
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            // üîπ –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            await DoWorkAsync(stoppingToken);

            while (!stoppingToken.IsCancellationRequested)
            {
                // ‚è± –ü–∞—É–∑–∞ –Ω–∞ 1 –¥–µ–Ω—å
                await Task.Delay(TimeSpan.FromDays(1), stoppingToken);

                // üîÅ –ü–æ–≤—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                await DoWorkAsync(stoppingToken);
            }
        }

        private async Task DoWorkAsync(CancellationToken stoppingToken)
        {
            using var scope = _serviceProvider.CreateScope();
            var db = scope.ServiceProvider.GetRequiredService<SupplyManufacturerContext>();
            var dbManufact = scope.ServiceProvider.GetRequiredService<ManufacturerComponentContext>();

            try
            {

                // –®–∞–≥ 1: –Ω–∞–π—Ç–∏ –∏–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
                var duplicateNames = await db.SupplyManufacturer
                    .FromSqlRaw(@"
                        SELECT NameManufacturer
                        FROM SupplyManufacturer
                        GROUP BY NameManufacturer
                        HAVING COUNT(*) > 1
                    ")
                    .Select(m => m.NameManufacturer)
                    .ToListAsync(stoppingToken);

                // –®–∞–≥ 2: –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ –∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∏–º–µ–Ω–∏
                var grouped = await db.SupplyManufacturer
                    .Where(m => duplicateNames.Contains(m.NameManufacturer))
                    .ToListAsync(stoppingToken);

                var groupedByName = grouped
                    .GroupBy(c => c.NameManufacturer)
                    .ToList();

                // –®–∞–≥ 3: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                foreach (var group in groupedByName)
                {
                    var toKeep = group.First(); // –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å
                    var toRemove = group.Skip(1).ToList(); // –¥—É–±–ª–∏–∫–∞—Ç—ã

                    foreach (var duplicate in toRemove)
                    {
                        // –ù–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                        var manufact = await dbManufact.ManufacturerComponent
                            .FirstOrDefaultAsync(m => m.GuidIdComponent == duplicate.GuidIdManufacturer, stoppingToken);

                        if (manufact != null)
                        {
                            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø–∏—Å—å—é
                            var existing = await dbManufact.ManufacturerComponent
                                .AnyAsync(m => m.GuidIdComponent == toKeep.GuidIdManufacturer, stoppingToken);

                            if (!existing)
                            {
                                manufact.GuidIdComponent = toKeep.GuidIdManufacturer;
                            }
                            else
                            {
                                dbManufact.ManufacturerComponent.Remove(manufact);
                            }
                        }

                        // –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
                        db.SupplyManufacturer.Remove(duplicate);
                    }

                    _logger.LogInformation("–û–±—ä–µ–¥–∏–Ω–µ–Ω—ã –∏ –æ—á–∏—â–µ–Ω—ã –¥—É–±–ª–∏ –¥–ª—è: {VendorName}, —É–¥–∞–ª–µ–Ω–æ: {Count}", group.Key, toRemove.Count);
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await dbManufact.SaveChangesAsync(stoppingToken);
                await db.SaveChangesAsync(stoppingToken);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π");
            }
        }
    }
}
