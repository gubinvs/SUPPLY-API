using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace SUPPLY_API
{
    public class RemoveDuplicatesManufacturer : BackgroundService
    {
        /// <summary>
        /// üìå –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥:
        /// –í—ã–±–∏—Ä–∞–µ—Ç –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–∞–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º NameManufacturer, –≥–¥–µ –µ—Å—Ç—å –¥—É–±–ª–∏;
        /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–Ω—É –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å;
        /// –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ —Ç–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ—Ç;
        /// –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∏—Ö —Å–≤—è–∑–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã;
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏.
        /// </summary>
        /// 
        
        private readonly IServiceProvider _serviceProvider;
        private readonly ILogger<RemoveDuplicatesManufacturer> _logger;

        public RemoveDuplicatesManufacturer(IServiceProvider serviceProvider, ILogger<RemoveDuplicatesManufacturer> logger)
        {
            _serviceProvider = serviceProvider;
            _logger = logger;
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            // üîπ –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            await DoWorkAsync(stoppingToken);

            while (!stoppingToken.IsCancellationRequested)
            {
                // ‚è± –ü–∞—É–∑–∞ –Ω–∞ 1 –¥–µ–Ω—å
                await Task.Delay(TimeSpan.FromDays(1), stoppingToken);

                // üîÅ –ü–æ–≤—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                await DoWorkAsync(stoppingToken);
            }
        }

        private async Task DoWorkAsync(CancellationToken stoppingToken)
        {
            using var scope = _serviceProvider.CreateScope();
            var db = scope.ServiceProvider.GetRequiredService<SupplyManufacturerContext>();
            var dbManufact = scope.ServiceProvider.GetRequiredService<ManufacturerComponentContext>();

            try
            {
                var grouped = await db.SupplyManufacturer
                    .GroupBy(c => c.NameManufacturer)
                    .Where(g => g.Count() > 1)
                    .ToListAsync(stoppingToken);

                foreach (var group in grouped)
                {
                    var toKeep = group.First(); // –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å
                    var toRemove = group.Skip(1).ToList(); // –¥—É–±–ª–∏–∫–∞—Ç—ã

                    foreach (var duplicate in toRemove)
                    {
                        var manufact = await dbManufact.ManufacturerComponent
                            .FirstOrDefaultAsync(m => m.GuidIdComponent == duplicate.GuidIdManufacturer, stoppingToken);
                        if (manufact != null)
                        {
                            var existing = await dbManufact.ManufacturerComponent
                                .AnyAsync(m => m.GuidIdComponent == toKeep.GuidIdManufacturer, stoppingToken);

                            if (!existing)
                            {
                                manufact.GuidIdComponent = toKeep.GuidIdManufacturer;
                            }
                            else
                            {
                                dbManufact.ManufacturerComponent.Remove(manufact);
                            }
                        }

                        db.SupplyManufacturer.Remove(duplicate);
                    }

                    _logger.LogInformation("–û–±—ä–µ–¥–∏–Ω–µ–Ω—ã –∏ –æ—á–∏—â–µ–Ω—ã –¥—É–±–ª–∏ –¥–ª—è: {VendorCode}", group.Key);
                }

                await dbManufact.SaveChangesAsync(stoppingToken);
                await db.SaveChangesAsync(stoppingToken);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
            }
        }
    }
}