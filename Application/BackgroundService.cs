using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

namespace SUPPLY_API
{
    public class DuplicateCleanupService : BackgroundService
    {
        /// <summary>
        /// üìå –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥:
        /// –í—ã–±–∏—Ä–∞–µ—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º VendorCodeComponent, –≥–¥–µ –µ—Å—Ç—å –¥—É–±–ª–∏;
        /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–Ω—É –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å;
        /// –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ —Ç–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ—Ç;
        /// –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∏—Ö —Å–≤—è–∑–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã;
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏.
        /// </summary>
        /// 
        private readonly IServiceProvider _serviceProvider;
        private readonly ILogger<DuplicateCleanupService> _logger;

        public DuplicateCleanupService(IServiceProvider serviceProvider, ILogger<DuplicateCleanupService> logger)
        {
            _serviceProvider = serviceProvider;
            _logger = logger;
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            while (!stoppingToken.IsCancellationRequested)
            {
                await Task.Delay(TimeSpan.FromDays(1), stoppingToken);

                using var scope = _serviceProvider.CreateScope();
                var db = scope.ServiceProvider.GetRequiredService<SupplyComponentContext>();
                var dbPrice = scope.ServiceProvider.GetRequiredService<SupplyPriceComponentContext>();
                var dbManufact = scope.ServiceProvider.GetRequiredService<ManufacturerComponentContext>();
                var dbUnit = scope.ServiceProvider.GetRequiredService<UnitMeasurementComponentContext>();

                try
                {
                    var grouped = await db.SupplyComponent
                        .GroupBy(c => c.VendorCodeComponent)
                        .Where(g => g.Count() > 1)
                        .ToListAsync(stoppingToken);

                    foreach (var group in grouped)
                    {
                        var toKeep = group.First(); // –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–ø–∏—Å—å
                        var toRemove = group.Skip(1).ToList(); // –¥—É–±–ª–∏–∫–∞—Ç—ã

                        foreach (var duplicate in toRemove)
                        {
                            // –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ü–µ–Ω—ã
                            var prices = await dbPrice.PriceComponent
                                .Where(p => p.GuidIdComponent == duplicate.GuidIdComponent)
                                .ToListAsync(stoppingToken);

                            foreach (var price in prices)
                            {
                                price.GuidIdComponent = toKeep.GuidIdComponent;
                            }

                            // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
                            var manufact = await dbManufact.ManufacturerComponent
                                .FirstOrDefaultAsync(m => m.GuidIdComponent == duplicate.GuidIdComponent, stoppingToken);
                            if (manufact != null)
                            {
                                var existing = await dbManufact.ManufacturerComponent
                                    .AnyAsync(m => m.GuidIdComponent == toKeep.GuidIdComponent, stoppingToken);

                                if (!existing)
                                {
                                    manufact.GuidIdComponent = toKeep.GuidIdComponent;
                                }
                                else
                                {
                                    dbManufact.ManufacturerComponent.Remove(manufact);
                                }
                            }

                            // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
                            var unit = await dbUnit.UnitMeasurementComponent
                                .FirstOrDefaultAsync(u => u.GuidIdComponent == duplicate.GuidIdComponent, stoppingToken);
                            if (unit != null)
                            {
                                var existing = await dbUnit.UnitMeasurementComponent
                                    .AnyAsync(u => u.GuidIdComponent == toKeep.GuidIdComponent, stoppingToken);

                                if (!existing)
                                {
                                    unit.GuidIdComponent = toKeep.GuidIdComponent;
                                }
                                else
                                {
                                    dbUnit.UnitMeasurementComponent.Remove(unit);
                                }
                            }

                            db.SupplyComponent.Remove(duplicate);
                        }

                        _logger.LogInformation("–û–±—ä–µ–¥–∏–Ω–µ–Ω—ã –∏ –æ—á–∏—â–µ–Ω—ã –¥—É–±–ª–∏ –¥–ª—è: {VendorCode}", group.Key);
                    }

                    await dbPrice.SaveChangesAsync(stoppingToken);
                    await dbManufact.SaveChangesAsync(stoppingToken);
                    await dbUnit.SaveChangesAsync(stoppingToken);
                    await db.SaveChangesAsync(stoppingToken);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
                }
            }
        }
    }
}